illegal.class.level.annotation=@CheckForNull, @Nullable, @Nonnull and @CheckReturnValue are not allowed on class level. Use @ParametersAreNonnullByDefault, @ParametersAreNullableByDefault and @ReturnValuesAreNonnullByDefault.
contradicting.class.level.annotations=@ParametersAreNullableByDefault and @ParametersAreNonnullByDefault are not allowed together!
param.definitions.with.check.annotation=Parameter definitions don't need checking, use @Nullable or @Nonnull.
param.definition.with.override.annotation=@Override is not allowed on parameter definition!
param.definition.with.nonnull.by.default.annotation=@ParametersAreNonnullByDefault is not allowed on parameter definition!
param.definition.with.nullable.by.default.annotation=@ParametersAreNullableByDefault is not allowed on parameter definition!
param.definition.with.return.values.default.annotation=@ReturnValuesAreNonnullByDefault is not allowed on parameter definition!
param.nonnull.and.nullable.annotation=@Nonnull and @Nullable are not allowed together!
primitives.with.nullness.annotation=Primitives must not have any nullness annotations!
overridden.definitions.with.increased.param.constraint=It is not allowed to increase nullness constraint for overriden method parameter definitions!
redundant.nonnull.param.annotation=It is not necessary to annotate @Nonnull if you annotated the method or class with @ParametersAreNonnullByDefault.
redundant.nullable.param.annotation=It is not necessary to annotate @Nullable if you annoted the method or class with @ParametersAreNullableByDefault.
parameter.without.nullness.annotation=No nullness Annotation for parameter definition found!
return.value.with.nonnull.by.default.annotation=@ReturnValuesAreNonnullByDefault is not allowed on method return values!
return.value.with.nullable.annotation=@Nullable is not allowed on method return values!
contradicting.return.value.annotations=@Nonnull and @CheckForNull are not allowed together!
overridden.method.with.check.return.value.annotation=@CheckReturnValue is not allowed on overriden methods, annotate the interface or superclass!
redundant.nonnull.by.default.annotation=Redundant @ParametersAreNonnullByDefault, the class is annotated with the same annotation!
redundant.nullable.by.default.annotation=Redundant @ParametersAreNullableByDefault, the class is annotated with the same annotation!
void.with.check.return.value.annotation=There is nothing to check on void return methods, remove @CheckReturnValue!
redundant.nonnull.return.annotation=It is not necessary to annotate @Nonnull if you annoted the class with @ReturnValuesAreNonnullByDefault.
return.without.nullness.annotation=Return value must have nullness Annotation (@Nonnull or @CheckForNull)!
overridden.methods.allow.only.nonnull=Overriden methods allow only @Nonnull.
need.to.inherit.param.annotations=You have to inherit parameter annotations!
constructor.with.return.annotation=Constructors have no return value and must not be annotated!
